% Gregory Poore
% BME 462 Design
% Machine Learning

%% Data entry

% Baselines
base1 = csvread('BigDaddyDataBaseline1.csv');
base2 = csvread('Nov 20 - Baseline 2 - Sheet1.csv');

% Bacterial
bact1 = csvread('BigDaddyDataConfig1.csv');
bact2 = csvread('Nov 20 - Three Clumped 1 - Sheet1.csv');
bact3 = csvread('Nov 20 - Three Clumped 2 - Sheet1.csv');
bact4 = csvread('Nov 20 - Three Clumped 3 - Sheet1.csv');

% Viral
viral1 = csvread('BigDaddyDataConfig2.csv');
viral2 = csvread('Nov 20 - Three Spread 1 - Sheet1.csv');
viral3 = csvread('Nov 20 - Three Spread 2 - Sheet1.csv');
viral4 = csvread('Nov 20 - Three Spread 3 - Sheet1.csv');

%% Rescale data

base1 = reshape(rescale(base1),[400,1]);
base2 = reshape(rescale(base2),[400,1]);
bact1 = reshape(rescale(bact1),[400,1]);
bact2 = reshape(rescale(bact2),[400,1]);
bact3 = reshape(rescale(bact3),[400,1]);
bact4 = reshape(rescale(bact4),[400,1]);
viral1 = reshape(rescale(viral1),[400,1]);
viral2 = reshape(rescale(viral2),[400,1]);
viral3 = reshape(rescale(viral3),[400,1]);
viral4 = reshape(rescale(viral4),[400,1]);

% Collect samples. Dimensions are (n measurements)x(m samples)
allSamples = [base1 base2 bact1 bact2 bact3 bact4 viral1 viral2 viral3 viral4];
bactVsViral = [bact1 bact2 bact3 bact4 viral1 viral2 viral3 viral4];
etioAll = [0 0 1 1 1 1 2 2 2 2];
etioTargetAll = [1 1 0 0 0 0 0 0 0 0;
    0 0 1 1 1 1 0 0 0 0;
    0 0 0 0 0 0 1 1 1 1];
etioBactVsViralTarget = [1 1 1 1 0 0 0 0;
                    0 0 0 0 1 1 1 1];
etioBactVsViral = [0 0 0 0 1 1 1 1];
etioBactVsViralString = ['Bactl'; 'Bactl'; 'Bactl'; 'Bactl'; 'Viral'; 'Viral'; 'Viral'; 'Viral'];
etioBactVsViralString = cellstr(etioBactVsViralString);

%% Machine Learning
% 
% % Solve a Pattern Recognition Problem with a Neural Network
% % Script generated by NPRTOOL
% %
% % This script assumes these variables are defined:

inputs = bactVsViral;
targets = etioBactVsViralTarget;

% Create a Pattern Recognition Network
hiddenLayerSize = 1000;

limit = 1000;
conf = zeros(1,limit);
for n=1:limit
    net = patternnet(hiddenLayerSize);

    % Set up Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = 75/100;
    net.divideParam.valRatio = 0/100;
    net.divideParam.testRatio = 25/100;
    % Train the Network
    [net,tr] = train(net,inputs,targets);
    % Test the Network
    outputs = net(inputs);
    errors = gsubtract(targets,outputs);
    performance = perform(net,targets,outputs);
    conf(n) = confusion(targets,outputs);
    n
end
% View the Network
% view(net)

% Plots
% Uncomment these lines to enable various plots.
% figure, plotperform(tr)
% figure, plottrainstate(tr)
% figure, plotconfusion(targets,outputs)
% figure, ploterrhist(errors)

%% Attempting CV calculation
% inputs = bactVsViral;
% targets = etioBactVsViral;
% 
% % Create a Pattern Recognition Network
% hiddenLayerSize = 10;
% net = patternnet(hiddenLayerSize);
% 
% indices = crossvalind('Kfold',etioBactVsViral,5);
%       cp = classperf(etioBactVsViral); % initializes the CP object
%       for i = 1:10
%           test = (indices == i); 
%           train = ~test;
%           net = patternnet(10);
%           net = train(net,inputs(train,:),targets(train,:));
%           class = net(inputs(train,:));
%         % Test the Network
%         outputs = net(inputs);
%         errors = gsubtract(targets,outputs);
%         performance = perform(net,targets,outputs)
%         classperf(cp,class,test);
%       end
%       cp.CorrectRate % queries for the correct classification rate

